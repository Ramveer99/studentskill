import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["slots", "slotProps", "innerRadius", "outerRadius", "cornerRadius", "paddingAngle", "id", "highlightScope", "highlighted", "faded", "data", "arcLabel", "arcLabelMinAngle", "skipAnimation"],
  _excluded2 = ["startAngle", "endAngle", "paddingAngle", "innerRadius", "outerRadius", "cornerRadius"];
import * as React from 'react';
import { useTransition } from '@react-spring/web';
import { defaultLabelTransitionConfig } from './dataTransform/transition';
import { useTransformData } from './dataTransform/useTransformData';
import { PieArcLabel } from './PieArcLabel';
import { jsx as _jsx } from "react/jsx-runtime";
var RATIO = 180 / Math.PI;
function getItemLabel(arcLabel, arcLabelMinAngle, item) {
  if (!arcLabel) {
    return null;
  }
  var angle = (item.endAngle - item.startAngle) * RATIO;
  if (angle < arcLabelMinAngle) {
    return null;
  }
  if (typeof arcLabel === 'string') {
    var _item$arcLabel;
    return (_item$arcLabel = item[arcLabel]) == null ? void 0 : _item$arcLabel.toString();
  }
  return arcLabel(item);
}
export function PieArcLabelPlot(props) {
  var _slots$pieArcLabel;
  var slots = props.slots,
    slotProps = props.slotProps,
    _props$innerRadius = props.innerRadius,
    innerRadius = _props$innerRadius === void 0 ? 0 : _props$innerRadius,
    outerRadius = props.outerRadius,
    _props$cornerRadius = props.cornerRadius,
    cornerRadius = _props$cornerRadius === void 0 ? 0 : _props$cornerRadius,
    _props$paddingAngle = props.paddingAngle,
    paddingAngle = _props$paddingAngle === void 0 ? 0 : _props$paddingAngle,
    id = props.id,
    highlightScope = props.highlightScope,
    highlighted = props.highlighted,
    _props$faded = props.faded,
    faded = _props$faded === void 0 ? {
      additionalRadius: -5
    } : _props$faded,
    data = props.data,
    arcLabel = props.arcLabel,
    _props$arcLabelMinAng = props.arcLabelMinAngle,
    arcLabelMinAngle = _props$arcLabelMinAng === void 0 ? 0 : _props$arcLabelMinAng,
    skipAnimation = props.skipAnimation,
    other = _objectWithoutProperties(props, _excluded);
  var transformedData = useTransformData({
    innerRadius: innerRadius,
    outerRadius: outerRadius,
    cornerRadius: cornerRadius,
    paddingAngle: paddingAngle,
    id: id,
    highlightScope: highlightScope,
    highlighted: highlighted,
    faded: faded,
    data: data
  });
  var transition = useTransition(transformedData, _extends({}, defaultLabelTransitionConfig, {
    immediate: skipAnimation
  }));
  if (data.length === 0) {
    return null;
  }
  var ArcLabel = (_slots$pieArcLabel = slots == null ? void 0 : slots.pieArcLabel) != null ? _slots$pieArcLabel : PieArcLabel;
  return /*#__PURE__*/_jsx("g", _extends({}, other, {
    children: transition(function (_ref, item) {
      var startAngle = _ref.startAngle,
        endAngle = _ref.endAngle,
        pA = _ref.paddingAngle,
        iR = _ref.innerRadius,
        oR = _ref.outerRadius,
        cR = _ref.cornerRadius,
        style = _objectWithoutProperties(_ref, _excluded2);
      return /*#__PURE__*/_jsx(ArcLabel, _extends({
        startAngle: startAngle,
        endAngle: endAngle,
        paddingAngle: pA,
        innerRadius: iR,
        outerRadius: oR,
        cornerRadius: cR,
        style: style,
        id: id,
        color: item.color,
        isFaded: item.isFaded,
        isHighlighted: item.isHighlighted,
        formattedArcLabel: getItemLabel(arcLabel, arcLabelMinAngle, item)
      }, slotProps == null ? void 0 : slotProps.pieArcLabel));
    })
  }));
}