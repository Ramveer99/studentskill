import * as React from 'react';
import PropTypes from 'prop-types';
import { SeriesContext } from '../context/SeriesContextProvider';
import { DrawingContext } from '../context/DrawingProvider';
import { PieArcPlot } from './PieArcPlot';
import { PieArcLabelPlot } from './PieArcLabelPlot';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Demos:
 *
 * - [Pie](https://mui.com/x/react-charts/pie/)
 * - [Pie demonstration](https://mui.com/x/react-charts/pie-demo/)
 *
 * API:
 *
 * - [PiePlot API](https://mui.com/x/api/charts/pie-plot/)
 */
function PiePlot(props) {
  var skipAnimation = props.skipAnimation,
    slots = props.slots,
    slotProps = props.slotProps,
    onClick = props.onClick;
  var seriesData = React.useContext(SeriesContext).pie;
  var _React$useContext = React.useContext(DrawingContext),
    left = _React$useContext.left,
    top = _React$useContext.top,
    width = _React$useContext.width,
    height = _React$useContext.height;
  if (seriesData === undefined) {
    return null;
  }
  var availableRadius = Math.min(width, height) / 2;
  var center = {
    x: left + width / 2,
    y: top + height / 2
  };
  var series = seriesData.series,
    seriesOrder = seriesData.seriesOrder;
  return /*#__PURE__*/_jsxs("g", {
    children: [seriesOrder.map(function (seriesId) {
      var _series$seriesId = series[seriesId],
        innerRadius = _series$seriesId.innerRadius,
        outerRadius = _series$seriesId.outerRadius,
        cornerRadius = _series$seriesId.cornerRadius,
        paddingAngle = _series$seriesId.paddingAngle,
        data = _series$seriesId.data,
        cx = _series$seriesId.cx,
        cy = _series$seriesId.cy,
        highlighted = _series$seriesId.highlighted,
        faded = _series$seriesId.faded,
        highlightScope = _series$seriesId.highlightScope;
      return /*#__PURE__*/_jsx("g", {
        transform: "translate(".concat(cx === undefined ? center.x : left + cx, ", ").concat(cy === undefined ? center.y : top + cy, ")"),
        children: /*#__PURE__*/_jsx(PieArcPlot, {
          innerRadius: innerRadius,
          outerRadius: outerRadius != null ? outerRadius : availableRadius,
          cornerRadius: cornerRadius,
          paddingAngle: paddingAngle,
          id: seriesId,
          data: data,
          skipAnimation: skipAnimation,
          highlightScope: highlightScope,
          highlighted: highlighted,
          faded: faded,
          onClick: onClick,
          slots: slots,
          slotProps: slotProps
        })
      }, seriesId);
    }), seriesOrder.map(function (seriesId) {
      var _series$seriesId2 = series[seriesId],
        innerRadius = _series$seriesId2.innerRadius,
        outerRadius = _series$seriesId2.outerRadius,
        cornerRadius = _series$seriesId2.cornerRadius,
        paddingAngle = _series$seriesId2.paddingAngle,
        arcLabel = _series$seriesId2.arcLabel,
        arcLabelMinAngle = _series$seriesId2.arcLabelMinAngle,
        data = _series$seriesId2.data,
        cx = _series$seriesId2.cx,
        cy = _series$seriesId2.cy,
        highlightScope = _series$seriesId2.highlightScope;
      return /*#__PURE__*/_jsx("g", {
        transform: "translate(".concat(cx === undefined ? center.x : left + cx, ", ").concat(cy === undefined ? center.y : top + cy, ")"),
        children: /*#__PURE__*/_jsx(PieArcLabelPlot, {
          innerRadius: innerRadius,
          outerRadius: outerRadius != null ? outerRadius : availableRadius,
          cornerRadius: cornerRadius,
          paddingAngle: paddingAngle,
          id: seriesId,
          data: data,
          skipAnimation: skipAnimation,
          arcLabel: arcLabel,
          arcLabelMinAngle: arcLabelMinAngle,
          highlightScope: highlightScope
        })
      }, seriesId);
    })]
  });
}
process.env.NODE_ENV !== "production" ? PiePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onClick: PropTypes.func,
  /**
   * If `true`, animations are skiped.
   * @default false
   */
  skipAnimation: PropTypes.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { PiePlot };