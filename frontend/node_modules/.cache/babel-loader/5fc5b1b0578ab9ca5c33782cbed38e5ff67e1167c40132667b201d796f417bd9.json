{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../useCompound';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  var valueParam = parameters.value,\n    externalRef = parameters.rootRef,\n    _parameters$disabled = parameters.disabled,\n    disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,\n    idParam = parameters.id;\n  var tabRef = React.useRef(null);\n  var id = useId(idParam);\n  var _useTabsContext = useTabsContext(),\n    selectedValue = _useTabsContext.value,\n    selectionFollowsFocus = _useTabsContext.selectionFollowsFocus,\n    getTabPanelId = _useTabsContext.getTabPanelId;\n  var tabMetadata = React.useMemo(function () {\n    return {\n      disabled: disabled,\n      ref: tabRef,\n      id: id\n    };\n  }, [disabled, tabRef, id]);\n  var _useCompoundItem = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata),\n    value = _useCompoundItem.id,\n    index = _useCompoundItem.index,\n    totalTabsCount = _useCompoundItem.totalItemCount;\n  var _useListItem = useListItem({\n      item: value\n    }),\n    getTabProps = _useListItem.getRootProps,\n    highlighted = _useListItem.highlighted,\n    selected = _useListItem.selected;\n  var _useButton = useButton({\n      disabled: disabled,\n      focusableWhenDisabled: !selectionFollowsFocus,\n      type: 'button'\n    }),\n    getButtonProps = _useButton.getRootProps,\n    buttonRefHandler = _useButton.rootRef,\n    active = _useButton.active,\n    focusVisible = _useButton.focusVisible,\n    setFocusVisible = _useButton.setFocusVisible;\n  var handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  var tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  var getRootProps = function getRootProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    var getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id: id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps: getRootProps,\n    active: active,\n    focusVisible: focusVisible,\n    highlighted: highlighted,\n    index: index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible: setFocusVisible,\n    totalTabsCount: totalTabsCount\n  };\n}\nexport { useTab };","map":{"version":3,"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useTabsContext","extractEventHandlers","useCompoundItem","useListItem","useButton","combineHooksSlotProps","tabValueGenerator","otherTabValues","size","useTab","parameters","valueParam","value","externalRef","rootRef","_parameters$disabled","disabled","idParam","id","tabRef","useRef","_useTabsContext","selectedValue","selectionFollowsFocus","getTabPanelId","tabMetadata","useMemo","ref","_useCompoundItem","index","totalTabsCount","totalItemCount","_useListItem","item","getTabProps","getRootProps","highlighted","selected","_useButton","focusableWhenDisabled","type","getButtonProps","buttonRefHandler","active","focusVisible","setFocusVisible","handleRef","tabPanelId","undefined","externalProps","arguments","length","externalEventHandlers","getCombinedRootProps","role"],"sources":["/var/www/html/React/lkgs/node_modules/@mui/base/useTab/useTab.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../useCompound';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: 'button'\n  });\n  const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  const tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\nexport { useTab };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}