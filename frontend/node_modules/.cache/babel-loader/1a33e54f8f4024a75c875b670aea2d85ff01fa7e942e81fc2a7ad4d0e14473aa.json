{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n// DOM utils taken from\n// https://github.com/recharts/recharts/blob/master/src/util/DOMUtils.ts\n\nconst isSsr = () => !(typeof window !== 'undefined' && window.document && window.setTimeout);\nconst stringCache = {\n  widthCache: {},\n  cacheCount: 0\n};\nconst MAX_CACHE_NUM = 2000;\nconst SPAN_STYLE = {\n  position: 'absolute',\n  top: '-20000px',\n  left: 0,\n  padding: 0,\n  margin: 0,\n  border: 'none',\n  whiteSpace: 'pre'\n};\nconst STYLE_LIST = ['minWidth', 'maxWidth', 'width', 'minHeight', 'maxHeight', 'height', 'top', 'left', 'fontSize', 'padding', 'margin', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom'];\nconst MEASUREMENT_SPAN_ID = 'mui_measurement_span';\n\n/**\n *\n * @param name CSS property name\n * @param value\n * @returns add 'px' for distance properties\n */\nfunction autoCompleteStyle(name, value) {\n  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {\n    return `${value}px`;\n  }\n  return value;\n}\n\n/**\n *\n * @param text camelcase css property\n * @returns css property\n */\nfunction camelToMiddleLine(text) {\n  const strs = text.split('');\n  const formatStrs = strs.reduce((result, entry) => {\n    if (entry === entry.toUpperCase()) {\n      return [...result, '-', entry.toLowerCase()];\n    }\n    return [...result, entry];\n  }, []);\n  return formatStrs.join('');\n}\n\n/**\n *\n * @param style React style object\n * @returns CSS styling string\n */\nexport const getStyleString = style => Object.keys(style).sort().reduce((result, s) => `${result}${camelToMiddleLine(s)}:${autoCompleteStyle(s, style[s])};`, '');\n\n/**\n *\n * @param text The string to estimate\n * @param style The style applied\n * @returns width and height of the text\n */\nexport const getStringSize = (text, style = {}) => {\n  if (text === undefined || text === null || isSsr()) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const str = `${text}`;\n  const styleString = getStyleString(style);\n  const cacheKey = `${str}-${styleString}`;\n  if (stringCache.widthCache[cacheKey]) {\n    return stringCache.widthCache[cacheKey];\n  }\n  try {\n    let measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);\n    if (measurementSpan === null) {\n      measurementSpan = document.createElement('span');\n      measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID);\n      measurementSpan.setAttribute('aria-hidden', 'true');\n      document.body.appendChild(measurementSpan);\n    }\n    // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)\n    // https://en.wikipedia.org/wiki/Content_Security_Policy\n    const measurementSpanStyle = _extends({}, SPAN_STYLE, style);\n    Object.keys(measurementSpanStyle).map(styleKey => {\n      measurementSpan.style[camelToMiddleLine(styleKey)] = autoCompleteStyle(styleKey, measurementSpanStyle[styleKey]);\n      return styleKey;\n    });\n    measurementSpan.textContent = str;\n    const rect = measurementSpan.getBoundingClientRect();\n    const result = {\n      width: rect.width,\n      height: rect.height\n    };\n    stringCache.widthCache[cacheKey] = result;\n    if (stringCache.cacheCount + 1 > MAX_CACHE_NUM) {\n      stringCache.cacheCount = 0;\n      stringCache.widthCache = {};\n    } else {\n      stringCache.cacheCount += 1;\n    }\n    return result;\n  } catch (e) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n};","map":{"version":3,"names":["_extends","isSsr","window","document","setTimeout","stringCache","widthCache","cacheCount","MAX_CACHE_NUM","SPAN_STYLE","position","top","left","padding","margin","border","whiteSpace","STYLE_LIST","MEASUREMENT_SPAN_ID","autoCompleteStyle","name","value","indexOf","camelToMiddleLine","text","strs","split","formatStrs","reduce","result","entry","toUpperCase","toLowerCase","join","getStyleString","style","Object","keys","sort","s","getStringSize","undefined","width","height","str","styleString","cacheKey","measurementSpan","getElementById","createElement","setAttribute","body","appendChild","measurementSpanStyle","map","styleKey","textContent","rect","getBoundingClientRect","e"],"sources":["/var/www/html/React/lkgs/node_modules/@mui/x-charts/esm/internals/domUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n// DOM utils taken from\n// https://github.com/recharts/recharts/blob/master/src/util/DOMUtils.ts\n\nconst isSsr = () => !(typeof window !== 'undefined' && window.document && window.setTimeout);\nconst stringCache = {\n  widthCache: {},\n  cacheCount: 0\n};\nconst MAX_CACHE_NUM = 2000;\nconst SPAN_STYLE = {\n  position: 'absolute',\n  top: '-20000px',\n  left: 0,\n  padding: 0,\n  margin: 0,\n  border: 'none',\n  whiteSpace: 'pre'\n};\nconst STYLE_LIST = ['minWidth', 'maxWidth', 'width', 'minHeight', 'maxHeight', 'height', 'top', 'left', 'fontSize', 'padding', 'margin', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom'];\nconst MEASUREMENT_SPAN_ID = 'mui_measurement_span';\n\n/**\n *\n * @param name CSS property name\n * @param value\n * @returns add 'px' for distance properties\n */\nfunction autoCompleteStyle(name, value) {\n  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {\n    return `${value}px`;\n  }\n  return value;\n}\n\n/**\n *\n * @param text camelcase css property\n * @returns css property\n */\nfunction camelToMiddleLine(text) {\n  const strs = text.split('');\n  const formatStrs = strs.reduce((result, entry) => {\n    if (entry === entry.toUpperCase()) {\n      return [...result, '-', entry.toLowerCase()];\n    }\n    return [...result, entry];\n  }, []);\n  return formatStrs.join('');\n}\n\n/**\n *\n * @param style React style object\n * @returns CSS styling string\n */\nexport const getStyleString = style => Object.keys(style).sort().reduce((result, s) => `${result}${camelToMiddleLine(s)}:${autoCompleteStyle(s, style[s])};`, '');\n\n/**\n *\n * @param text The string to estimate\n * @param style The style applied\n * @returns width and height of the text\n */\nexport const getStringSize = (text, style = {}) => {\n  if (text === undefined || text === null || isSsr()) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const str = `${text}`;\n  const styleString = getStyleString(style);\n  const cacheKey = `${str}-${styleString}`;\n  if (stringCache.widthCache[cacheKey]) {\n    return stringCache.widthCache[cacheKey];\n  }\n  try {\n    let measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);\n    if (measurementSpan === null) {\n      measurementSpan = document.createElement('span');\n      measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID);\n      measurementSpan.setAttribute('aria-hidden', 'true');\n      document.body.appendChild(measurementSpan);\n    }\n    // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)\n    // https://en.wikipedia.org/wiki/Content_Security_Policy\n    const measurementSpanStyle = _extends({}, SPAN_STYLE, style);\n    Object.keys(measurementSpanStyle).map(styleKey => {\n      measurementSpan.style[camelToMiddleLine(styleKey)] = autoCompleteStyle(styleKey, measurementSpanStyle[styleKey]);\n      return styleKey;\n    });\n    measurementSpan.textContent = str;\n    const rect = measurementSpan.getBoundingClientRect();\n    const result = {\n      width: rect.width,\n      height: rect.height\n    };\n    stringCache.widthCache[cacheKey] = result;\n    if (stringCache.cacheCount + 1 > MAX_CACHE_NUM) {\n      stringCache.cacheCount = 0;\n      stringCache.widthCache = {};\n    } else {\n      stringCache.cacheCount += 1;\n    }\n    return result;\n  } catch (e) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}